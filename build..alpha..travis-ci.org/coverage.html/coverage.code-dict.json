{"/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/test.js":"/* istanbul instrument in package npmtest_dynamodb_marshaler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/lib.npmtest_dynamodb_marshaler.js":"/* istanbul instrument in package npmtest_dynamodb_marshaler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dynamodb_marshaler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dynamodb_marshaler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dynamodb-marshaler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dynamodb_marshaler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dynamodb_marshaler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dynamodb_marshaler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_dynamodb_marshaler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dynamodb_marshaler.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_dynamodb_marshaler.__dirname +\n                    '/lib.npmtest_dynamodb_marshaler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/index.js":"'use strict';\n\nvar marshal = require('./marshal');\nvar marshalJson = require('./marshalJson');\nvar marshalItem = require('./marshalItem');\nvar unmarshal = require('./unmarshal');\nvar unmarshalItem = require('./unmarshalItem');\nvar unmarshalJson = require('./unmarshalJson');\n\nmodule.exports = {\n  marshal: marshal,\n  marshalItem: marshalItem,\n  marshalJson: marshalJson,\n  toDDB: marshalItem,\n  toJS: unmarshalItem,\n  unmarshal: unmarshal,\n  unmarshalItem: unmarshalItem,\n  unmarshalJson: unmarshalJson\n};\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/marshal.js":"'use strict';\n\nvar dispatch = require('dispatch-recursive');\nvar marshalingCommands = require('./lib/marshalingCommands');\n\nmodule.exports = dispatch.apply(undefined, marshalingCommands);\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/lib/marshalingCommands.js":"'use strict';\n\nvar _ = require('lodash');\nvar unexpectedItemHandler = require('./unexpectedItemHandler');\n\n/**\n * Converts boolean value to DynamoDb \"BOOL\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalBoolean(item) {\n  if (!_.isBoolean(item)) {\n    return undefined;\n  }\n\n  return {BOOL: item};\n}\n\n/**\n * Converts mixed array to DynamoDb \"L\"\n *\n * @param item\n * @param marshal\n * @returns {*}\n */\nfunction marshalList(item, marshal) {\n  if (!_.isArray(item)) {\n    return undefined;\n  }\n\n  return {L: _.map(item, marshal)};\n}\n\n/**\n * Converts object literal to DynamoDb \"M\"\n *\n * @param item\n * @param marshal\n * @returns {*}\n */\nfunction marshalMap(item, marshal) {\n  if (!_.isPlainObject(item)) {\n    return undefined;\n  }\n\n  return {M: _.mapValues(item, marshal)};\n}\n\n/**\n * Converts null to DynamoDb \"NULL\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalNull(item) {\n  if (!_.isNil(item)) {\n    return undefined;\n  }\n\n  return {NULL: true};\n}\n\n/**\n * Converts number to DynamoDb \"N\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalNumber(item) {\n  if (!_.isNumber(item)) {\n    return undefined;\n  }\n\n  return {N: item.toString()};\n}\n\n/**\n * Helper function for arrays to DynamoDb \"NS\"\n *\n * @param arr\n * @returns {*}\n */\nfunction marshalArrayToNumberSet(arr) {\n  if (\n    _.isEmpty(arr) ||\n    !_.every(arr, _.isNumber) ||\n    _.uniq(arr).length !== arr.length\n  ) {\n    return undefined;\n  }\n\n  return {\n    NS: _.map(arr, function(num) {\n      return num.toString();\n    })\n  };\n}\n\n/**\n * Converts Arrays and Sets to DynamoDb \"NS\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalNumberSet(item) {\n  if (_.isArray(item)) {\n    return marshalArrayToNumberSet(item);\n  }\n\n  return undefined;\n}\n\n/**\n * Converts strings to DynamoDb \"S\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalString(item) {\n  if (!_.isString(item) || _.isEmpty(item)) {\n    return undefined;\n  }\n\n  return {S: item};\n}\n\n/**\n * Helper function for arrays to DynamoDb \"SS\"\n *\n * @param arr\n * @returns {*}\n */\nfunction marshalArrayToStringSet(arr) {\n  if (\n    _.isEmpty(arr) ||\n    !_.every(arr, _.isString) ||\n    _.uniq(arr).length !== arr.length\n  ) {\n    return undefined;\n  }\n\n  return {SS: arr};\n}\n\n/**\n * Converts Arrays and Sets to DynamoDb \"SS\"\n *\n * @param item\n * @returns {*}\n */\nfunction marshalStringSet(item) {\n  if (_.isArray(item)) {\n    return marshalArrayToStringSet(item);\n  }\n\n  return undefined;\n}\n\nmodule.exports = [\n  marshalString,\n  marshalNumber,\n  marshalBoolean,\n  marshalNull,\n  marshalStringSet,\n  marshalNumberSet,\n  marshalList,\n  marshalMap,\n  unexpectedItemHandler\n];\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/lib/unexpectedItemHandler.js":"'use strict';\n\nfunction unexpectedItemHandler() {\n  throw new TypeError('Encountered unexpected item');\n}\n\nmodule.exports = unexpectedItemHandler;\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/marshalJson.js":"'use strict';\n\nvar marshalItem = require('./marshalItem');\n\n/**\n * Translates a JSON string into an object in DynamoDb format.\n *\n * @param {String} json A JSON representation of a javascript object.\n * @returns {Object} The marshaled DynamoDb compliant item.\n */\nfunction marshalJson(json) {\n  return marshalItem(JSON.parse(json));\n}\n\nmodule.exports = marshalJson;\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/marshalItem.js":"'use strict';\n\nvar ensureItemIsObject = require('./lib/ensureItemIsObject');\nvar marshal = require('./marshal');\n\n/**\n * Translates a javascript object into a format ready for DynamoDb.\n *\n * @param {Object} item Plain javascript object.\n * @returns {Object} The marshaled dynamoDb item.\n */\nfunction marshalItem(item) {\n  return marshal(item).M;\n}\n\nmodule.exports = ensureItemIsObject(marshalItem);\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/lib/ensureItemIsObject.js":"'use strict';\n\nvar _ = require('lodash');\n\n/**\n * Function decorator, validates item is a javascript object.\n *\n * @param {Function} fn Underlying function to call.\n * @returns {Function}\n */\nfunction ensureItemIsObject(fn) {\n  return function(item) {\n    if (_.isPlainObject(item)) {\n      return fn(item);\n    }\n    throw new TypeError('Item must be plain object literal');\n  };\n}\n\nmodule.exports = ensureItemIsObject;\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/unmarshal.js":"'use strict';\n\nvar dispatch = require('dispatch-recursive');\nvar unmarshalingCommands = require('./lib/unmarshalingCommands');\n\nmodule.exports = dispatch.apply(undefined, unmarshalingCommands);\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/lib/unmarshalingCommands.js":"'use strict';\n\nvar _ = require('lodash');\nvar unexpectedItemHandler = require('./unexpectedItemHandler');\n\n/**\n * Converts DynamoDb \"L\" to mixed array\n *\n * @param item\n * @param unmarshal\n * @returns {*}\n */\nfunction unmarshalList(item, unmarshal) {\n  if (!_.has(item, 'L')) {\n    return undefined;\n  }\n\n  return _.map(item.L, unmarshal);\n}\n\n/**\n * Converts DynamoDb \"M\" to object literal\n *\n * @param item\n * @param unmarshal\n * @returns {*}\n */\nfunction unmarshalMap(item, unmarshal) {\n  if (!_.has(item, 'M')) {\n    return undefined;\n  }\n\n  return _.mapValues(item.M, unmarshal);\n}\n\n/**\n * Converts DynamoDb \"NULL\" to null\n *\n * @param item\n * @returns {*}\n */\nfunction unmarshalNull(item) {\n  if (!_.has(item, 'NULL')) {\n    return undefined;\n  }\n\n  return null;\n}\n\n/**\n * Converts DynamoDb \"N\" to Number\n *\n * @param item\n * @returns {*}\n */\nfunction unmarshalNumber(item) {\n  if (!_.has(item, 'N')) {\n    return undefined;\n  }\n\n  return parseFloat(item.N);\n}\n\n/**\n * Converts DynamoDb \"NS\" to Set of Numbers\n *\n * @param item\n * @returns {*}\n */\nfunction unmarshalNumberSet(item) {\n  if (!_.has(item, 'NS')) {\n    return undefined;\n  }\n\n  return _.map(item.NS, parseFloat);\n}\n\n/**\n * Converts DynamoDb \"SS\" to Set of Strings\n *\n * @param item\n * @returns {*}\n */\nfunction unmarshalStringSet(item) {\n  if (!_.has(item, 'SS')) {\n    return undefined;\n  }\n\n  return item.SS;\n}\n\n/**\n * Converts DynamoDb \"S\", \"B\", \"BS\", \"BOOL\" to values.\n *\n * @param item\n * @returns {*}\n */\nfunction unmarshalPassThrough(item) {\n  var key = _.find(['S', 'B', 'BS', 'BOOL'], function(type) {\n    return _.has(item, type);\n  });\n\n  if (!key) {\n    return undefined;\n  }\n\n  return item[key];\n}\n\nmodule.exports = [\n  unmarshalPassThrough,\n  unmarshalNumber,\n  unmarshalStringSet,\n  unmarshalNumberSet,\n  unmarshalNull,\n  unmarshalMap,\n  unmarshalList,\n  unexpectedItemHandler\n];\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/unmarshalItem.js":"'use strict';\n\nvar ensureItemIsObject = require('./lib/ensureItemIsObject');\nvar unmarshal = require('./unmarshal');\n\n/**\n * Translates a DynamoDb formatted object (a response from DynamoDb sdk) into\n * a plain javascript object with DynamoDb AttributeValue objects.\n *\n * @param {Object} item DynamoDb formatted object.\n * @returns {Object} A javascript object in normal form.\n */\nfunction unmarshalItem(item) {\n  return unmarshal({ M: item });\n}\n\nmodule.exports = ensureItemIsObject(unmarshalItem);\n","/home/travis/build/npmtest/node-npmtest-dynamodb-marshaler/node_modules/dynamodb-marshaler/unmarshalJson.js":"'use strict';\n\nvar unmarshalItem = require('./unmarshalItem');\n\n/**\n * Translates a DynamoDb formatted object, into a normally formatted object\n * represented as a JSON string.\n *\n * @param {Object} item DynamoDb formatted object.\n * @returns {String} JSON representation of a javascript object.\n */\nfunction unmarshalJson(item) {\n  return JSON.stringify(unmarshalItem(item));\n}\n\nmodule.exports = unmarshalJson;\n"}